

// ------------------------------------------------------------------------------------------------
// This code was generated by EntityFramework Reverse POCO Generator (http://www.reversepoco.com/).
// Created by Simon Hughes (https://about.me/simon.hughes).
//
// Do not make changes directly to this file - edit the template instead.
//
// The following connection settings were used to generate this file:
//     Configuration file:     "CrashPasswordSystem.Data\App.config"
//     Connection String Name: "ITDatabaseContext"
//     Connection String:      "Data Source=CR-JMTLPC\SQLEXPRESS;Initial Catalog=ITDatabase;Integrated Security=True"
// ------------------------------------------------------------------------------------------------
// Database Edition        : Express Edition (64-bit)
// Database Engine Edition : Express
// Database Version        : 14.0.2002.14

// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable EmptyNamespace
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 4.6
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning


namespace CrashPasswordSystem.Data
{
    using System.Linq;

    #region Unit of work

    public interface IITDatabaseContext : System.IDisposable
    {
        System.Data.Entity.DbSet<CrashCompany> CrashCompanies { get; set; } // CrashCompany
        System.Data.Entity.DbSet<Product> Products { get; set; } // Products
        System.Data.Entity.DbSet<ProductCategory> ProductCategories { get; set; } // ProductCategory
        System.Data.Entity.DbSet<Supplier> Suppliers { get; set; } // Suppliers
        System.Data.Entity.DbSet<TblUser> TblUsers { get; set; } // tblUser
        System.Data.Entity.DbSet<UpdateHistory> UpdateHistories { get; set; } // UpdateHistory
        System.Data.Entity.DbSet<User> Users { get; set; } // Users

        int SaveChanges();
        System.Threading.Tasks.Task<int> SaveChangesAsync();
        System.Threading.Tasks.Task<int> SaveChangesAsync(System.Threading.CancellationToken cancellationToken);
        System.Data.Entity.Infrastructure.DbChangeTracker ChangeTracker { get; }
        System.Data.Entity.Infrastructure.DbContextConfiguration Configuration { get; }
        System.Data.Entity.Database Database { get; }
        System.Data.Entity.Infrastructure.DbEntityEntry<TEntity> Entry<TEntity>(TEntity entity) where TEntity : class;
        System.Data.Entity.Infrastructure.DbEntityEntry Entry(object entity);
        System.Collections.Generic.IEnumerable<System.Data.Entity.Validation.DbEntityValidationResult> GetValidationErrors();
        System.Data.Entity.DbSet Set(System.Type entityType);
        System.Data.Entity.DbSet<TEntity> Set<TEntity>() where TEntity : class;
        string ToString();
    }

    #endregion

    #region Database context

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ITDatabaseContext : System.Data.Entity.DbContext, IITDatabaseContext
    {
        public System.Data.Entity.DbSet<CrashCompany> CrashCompanies { get; set; } // CrashCompany
        public System.Data.Entity.DbSet<Product> Products { get; set; } // Products
        public System.Data.Entity.DbSet<ProductCategory> ProductCategories { get; set; } // ProductCategory
        public System.Data.Entity.DbSet<Supplier> Suppliers { get; set; } // Suppliers
        public System.Data.Entity.DbSet<TblUser> TblUsers { get; set; } // tblUser
        public System.Data.Entity.DbSet<UpdateHistory> UpdateHistories { get; set; } // UpdateHistory
        public System.Data.Entity.DbSet<User> Users { get; set; } // Users

        static ITDatabaseContext()
        {
            System.Data.Entity.Database.SetInitializer<ITDatabaseContext>(null);
        }

        public ITDatabaseContext()
            : base("Name=ITDatabaseContext")
        {
        }

        public ITDatabaseContext(string connectionString)
            : base(connectionString)
        {
        }

        public ITDatabaseContext(string connectionString, System.Data.Entity.Infrastructure.DbCompiledModel model)
            : base(connectionString, model)
        {
        }

        public ITDatabaseContext(System.Data.Common.DbConnection existingConnection, bool contextOwnsConnection)
            : base(existingConnection, contextOwnsConnection)
        {
        }

        public ITDatabaseContext(System.Data.Common.DbConnection existingConnection, System.Data.Entity.Infrastructure.DbCompiledModel model, bool contextOwnsConnection)
            : base(existingConnection, model, contextOwnsConnection)
        {
        }

        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);
        }

        public bool IsSqlParameterNull(System.Data.SqlClient.SqlParameter param)
        {
            var sqlValue = param.SqlValue;
            var nullableValue = sqlValue as System.Data.SqlTypes.INullable;
            if (nullableValue != null)
                return nullableValue.IsNull;
            return (sqlValue == null || sqlValue == System.DBNull.Value);
        }

        protected override void OnModelCreating(System.Data.Entity.DbModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            modelBuilder.Configurations.Add(new CrashCompanyConfiguration());
            modelBuilder.Configurations.Add(new ProductConfiguration());
            modelBuilder.Configurations.Add(new ProductCategoryConfiguration());
            modelBuilder.Configurations.Add(new SupplierConfiguration());
            modelBuilder.Configurations.Add(new TblUserConfiguration());
            modelBuilder.Configurations.Add(new UpdateHistoryConfiguration());
            modelBuilder.Configurations.Add(new UserConfiguration());
        }

        public static System.Data.Entity.DbModelBuilder CreateModel(System.Data.Entity.DbModelBuilder modelBuilder, string schema)
        {
            modelBuilder.Configurations.Add(new CrashCompanyConfiguration(schema));
            modelBuilder.Configurations.Add(new ProductConfiguration(schema));
            modelBuilder.Configurations.Add(new ProductCategoryConfiguration(schema));
            modelBuilder.Configurations.Add(new SupplierConfiguration(schema));
            modelBuilder.Configurations.Add(new TblUserConfiguration(schema));
            modelBuilder.Configurations.Add(new UpdateHistoryConfiguration(schema));
            modelBuilder.Configurations.Add(new UserConfiguration(schema));
            return modelBuilder;
        }
    }
    #endregion

    #region Database context factory

    public class ITDatabaseContextFactory : System.Data.Entity.Infrastructure.IDbContextFactory<ITDatabaseContext>
    {
        public ITDatabaseContext Create()
        {
            return new ITDatabaseContext();
        }
    }

    #endregion

    #region Fake Database context

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class FakeITDatabaseContext : IITDatabaseContext
    {
        public System.Data.Entity.DbSet<CrashCompany> CrashCompanies { get; set; }
        public System.Data.Entity.DbSet<Product> Products { get; set; }
        public System.Data.Entity.DbSet<ProductCategory> ProductCategories { get; set; }
        public System.Data.Entity.DbSet<Supplier> Suppliers { get; set; }
        public System.Data.Entity.DbSet<TblUser> TblUsers { get; set; }
        public System.Data.Entity.DbSet<UpdateHistory> UpdateHistories { get; set; }
        public System.Data.Entity.DbSet<User> Users { get; set; }

        public FakeITDatabaseContext()
        {
            _changeTracker = null;
            _configuration = null;
            _database = null;

            CrashCompanies = new FakeDbSet<CrashCompany>("Ccid");
            Products = new FakeDbSet<Product>("ProductId");
            ProductCategories = new FakeDbSet<ProductCategory>("Pcid");
            Suppliers = new FakeDbSet<Supplier>("SupplierId");
            TblUsers = new FakeDbSet<TblUser>("UserId");
            UpdateHistories = new FakeDbSet<UpdateHistory>("Uhid");
            Users = new FakeDbSet<User>("UserId");
        }

        public int SaveChangesCount { get; private set; }
        public int SaveChanges()
        {
            ++SaveChangesCount;
            return 1;
        }

        public System.Threading.Tasks.Task<int> SaveChangesAsync()
        {
            ++SaveChangesCount;
            return System.Threading.Tasks.Task<int>.Factory.StartNew(() => 1);
        }

        public System.Threading.Tasks.Task<int> SaveChangesAsync(System.Threading.CancellationToken cancellationToken)
        {
            ++SaveChangesCount;
            return System.Threading.Tasks.Task<int>.Factory.StartNew(() => 1, cancellationToken);
        }

        protected virtual void Dispose(bool disposing)
        {
        }

        public void Dispose()
        {
            Dispose(true);
        }

        private System.Data.Entity.Infrastructure.DbChangeTracker _changeTracker;
        public System.Data.Entity.Infrastructure.DbChangeTracker ChangeTracker { get { return _changeTracker; } }
        private System.Data.Entity.Infrastructure.DbContextConfiguration _configuration;
        public System.Data.Entity.Infrastructure.DbContextConfiguration Configuration { get { return _configuration; } }
        private System.Data.Entity.Database _database;
        public System.Data.Entity.Database Database { get { return _database; } }
        public System.Data.Entity.Infrastructure.DbEntityEntry<TEntity> Entry<TEntity>(TEntity entity) where TEntity : class
        {
            throw new System.NotImplementedException();
        }
        public System.Data.Entity.Infrastructure.DbEntityEntry Entry(object entity)
        {
            throw new System.NotImplementedException();
        }
        public System.Collections.Generic.IEnumerable<System.Data.Entity.Validation.DbEntityValidationResult> GetValidationErrors()
        {
            throw new System.NotImplementedException();
        }
        public System.Data.Entity.DbSet Set(System.Type entityType)
        {
            throw new System.NotImplementedException();
        }
        public System.Data.Entity.DbSet<TEntity> Set<TEntity>() where TEntity : class
        {
            throw new System.NotImplementedException();
        }
        public override string ToString()
        {
            throw new System.NotImplementedException();
        }

    }

    // ************************************************************************
    // Fake DbSet
    // Implementing Find:
    //      The Find method is difficult to implement in a generic fashion. If
    //      you need to test code that makes use of the Find method it is
    //      easiest to create a test DbSet for each of the entity types that
    //      need to support find. You can then write logic to find that
    //      particular type of entity, as shown below:
    //      public class FakeBlogDbSet : FakeDbSet<Blog>
    //      {
    //          public override Blog Find(params object[] keyValues)
    //          {
    //              var id = (int) keyValues.Single();
    //              return this.SingleOrDefault(b => b.BlogId == id);
    //          }
    //      }
    //      Read more about it here: https://msdn.microsoft.com/en-us/data/dn314431.aspx
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class FakeDbSet<TEntity> : System.Data.Entity.DbSet<TEntity>, IQueryable, System.Collections.Generic.IEnumerable<TEntity>, System.Data.Entity.Infrastructure.IDbAsyncEnumerable<TEntity> where TEntity : class
    {
        private readonly System.Reflection.PropertyInfo[] _primaryKeys;
        private readonly System.Collections.ObjectModel.ObservableCollection<TEntity> _data;
        private readonly IQueryable _query;

        public FakeDbSet()
        {
            _data = new System.Collections.ObjectModel.ObservableCollection<TEntity>();
            _query = _data.AsQueryable();
        }

        public FakeDbSet(params string[] primaryKeys)
        {
            _primaryKeys = typeof(TEntity).GetProperties().Where(x => primaryKeys.Contains(x.Name)).ToArray();
            _data = new System.Collections.ObjectModel.ObservableCollection<TEntity>();
            _query = _data.AsQueryable();
        }

        public override TEntity Find(params object[] keyValues)
        {
            if (_primaryKeys == null)
                throw new System.ArgumentException("No primary keys defined");
            if (keyValues.Length != _primaryKeys.Length)
                throw new System.ArgumentException("Incorrect number of keys passed to Find method");

            var keyQuery = this.AsQueryable();
            keyQuery = keyValues
                .Select((t, i) => i)
                .Aggregate(keyQuery,
                    (current, x) =>
                        current.Where(entity => _primaryKeys[x].GetValue(entity, null).Equals(keyValues[x])));

            return keyQuery.SingleOrDefault();
        }

        public override System.Threading.Tasks.Task<TEntity> FindAsync(System.Threading.CancellationToken cancellationToken, params object[] keyValues)
        {
            return System.Threading.Tasks.Task<TEntity>.Factory.StartNew(() => Find(keyValues), cancellationToken);
        }

        public override System.Threading.Tasks.Task<TEntity> FindAsync(params object[] keyValues)
        {
            return System.Threading.Tasks.Task<TEntity>.Factory.StartNew(() => Find(keyValues));
        }

        public override System.Collections.Generic.IEnumerable<TEntity> AddRange(System.Collections.Generic.IEnumerable<TEntity> entities)
        {
            if (entities == null) throw new System.ArgumentNullException("entities");
            var items = entities.ToList();
            foreach (var entity in items)
            {
                _data.Add(entity);
            }
            return items;
        }

        public override TEntity Add(TEntity item)
        {
            if (item == null) throw new System.ArgumentNullException("item");
            _data.Add(item);
            return item;
        }

        public override System.Collections.Generic.IEnumerable<TEntity> RemoveRange(System.Collections.Generic.IEnumerable<TEntity> entities)
        {
            if (entities == null) throw new System.ArgumentNullException("entities");
            var items = entities.ToList();
            foreach (var entity in items)
            {
                _data.Remove(entity);
            }
            return items;
        }

        public override TEntity Remove(TEntity item)
        {
            if (item == null) throw new System.ArgumentNullException("item");
            _data.Remove(item);
            return item;
        }

        public override TEntity Attach(TEntity item)
        {
            if (item == null) throw new System.ArgumentNullException("item");
            _data.Add(item);
            return item;
        }

        public override TEntity Create()
        {
            return System.Activator.CreateInstance<TEntity>();
        }

        public override TDerivedEntity Create<TDerivedEntity>()
        {
            return System.Activator.CreateInstance<TDerivedEntity>();
        }

        public override System.Collections.ObjectModel.ObservableCollection<TEntity> Local
        {
            get { return _data; }
        }

        System.Type IQueryable.ElementType
        {
            get { return _query.ElementType; }
        }

        System.Linq.Expressions.Expression IQueryable.Expression
        {
            get { return _query.Expression; }
        }

        IQueryProvider IQueryable.Provider
        {
            get { return new FakeDbAsyncQueryProvider<TEntity>(_query.Provider); }
        }

        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
        {
            return _data.GetEnumerator();
        }

        System.Collections.Generic.IEnumerator<TEntity> System.Collections.Generic.IEnumerable<TEntity>.GetEnumerator()
        {
            return _data.GetEnumerator();
        }

        System.Data.Entity.Infrastructure.IDbAsyncEnumerator<TEntity> System.Data.Entity.Infrastructure.IDbAsyncEnumerable<TEntity>.GetAsyncEnumerator()
        {
            return new FakeDbAsyncEnumerator<TEntity>(_data.GetEnumerator());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class FakeDbAsyncQueryProvider<TEntity> : System.Data.Entity.Infrastructure.IDbAsyncQueryProvider
    {
        private readonly IQueryProvider _inner;

        public FakeDbAsyncQueryProvider(IQueryProvider inner)
        {
            _inner = inner;
        }

        public IQueryable CreateQuery(System.Linq.Expressions.Expression expression)
        {
            var m = expression as System.Linq.Expressions.MethodCallExpression;
            if (m != null)
            {
                var resultType = m.Method.ReturnType; // it shoud be IQueryable<T>
                var tElement = resultType.GetGenericArguments()[0];
                var queryType = typeof(FakeDbAsyncEnumerable<>).MakeGenericType(tElement);
                return (IQueryable) System.Activator.CreateInstance(queryType, expression);
            }
            return new FakeDbAsyncEnumerable<TEntity>(expression);
        }

        public IQueryable<TElement> CreateQuery<TElement>(System.Linq.Expressions.Expression expression)
        {
            var queryType = typeof(FakeDbAsyncEnumerable<>).MakeGenericType(typeof(TElement));
            return (IQueryable<TElement>)System.Activator.CreateInstance(queryType, expression);
        }

        public object Execute(System.Linq.Expressions.Expression expression)
        {
            return _inner.Execute(expression);
        }

        public TResult Execute<TResult>(System.Linq.Expressions.Expression expression)
        {
            return _inner.Execute<TResult>(expression);
        }

        public System.Threading.Tasks.Task<object> ExecuteAsync(System.Linq.Expressions.Expression expression, System.Threading.CancellationToken cancellationToken)
        {
            return System.Threading.Tasks.Task.FromResult(Execute(expression));
        }

        public System.Threading.Tasks.Task<TResult> ExecuteAsync<TResult>(System.Linq.Expressions.Expression expression, System.Threading.CancellationToken cancellationToken)
        {
            return System.Threading.Tasks.Task.FromResult(Execute<TResult>(expression));
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class FakeDbAsyncEnumerable<T> : EnumerableQuery<T>, System.Data.Entity.Infrastructure.IDbAsyncEnumerable<T>, IQueryable<T>
    {
        public FakeDbAsyncEnumerable(System.Collections.Generic.IEnumerable<T> enumerable)
            : base(enumerable)
        { }

        public FakeDbAsyncEnumerable(System.Linq.Expressions.Expression expression)
            : base(expression)
        { }

        public System.Data.Entity.Infrastructure.IDbAsyncEnumerator<T> GetAsyncEnumerator()
        {
            return new FakeDbAsyncEnumerator<T>(this.AsEnumerable().GetEnumerator());
        }

        System.Data.Entity.Infrastructure.IDbAsyncEnumerator System.Data.Entity.Infrastructure.IDbAsyncEnumerable.GetAsyncEnumerator()
        {
            return GetAsyncEnumerator();
        }

        IQueryProvider IQueryable.Provider
        {
            get { return new FakeDbAsyncQueryProvider<T>(this); }
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class FakeDbAsyncEnumerator<T> : System.Data.Entity.Infrastructure.IDbAsyncEnumerator<T>
    {
        private readonly System.Collections.Generic.IEnumerator<T> _inner;

        public FakeDbAsyncEnumerator(System.Collections.Generic.IEnumerator<T> inner)
        {
            _inner = inner;
        }

        public void Dispose()
        {
            _inner.Dispose();
        }

        public System.Threading.Tasks.Task<bool> MoveNextAsync(System.Threading.CancellationToken cancellationToken)
        {
            return System.Threading.Tasks.Task.FromResult(_inner.MoveNext());
        }

        public T Current
        {
            get { return _inner.Current; }
        }

        object System.Data.Entity.Infrastructure.IDbAsyncEnumerator.Current
        {
            get { return Current; }
        }
    }

    #endregion

    #region POCO classes

    // CrashCompany
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class CrashCompany
    {
        public int Ccid { get; set; } // CCID (Primary key)
        public string CcName { get; set; } // CCName (length: 50)

        // Reverse navigation

        /// <summary>
        /// Child Products where [Products].[CCID] point to this entity (FK_tblProducts_tblCrashCompany)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Product> Products { get; set; } // Products.FK_tblProducts_tblCrashCompany

        public CrashCompany()
        {
            Products = new System.Collections.Generic.List<Product>();
        }
    }

    // Products
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class Product
    {
        public int ProductId { get; set; } // ProductID (Primary key)
        public int Pcid { get; set; } // PCID
        public int Ccid { get; set; } // CCID
        public int SupplierId { get; set; } // SupplierID
        public int StaffId { get; set; } // StaffID
        public string ProductDescription { get; set; } // ProductDescription (length: 100)
        public string ProductUrl { get; set; } // ProductURL (length: 200)
        public string ProductUsername { get; set; } // ProductUsername (length: 40)
        public string ProductPassword { get; set; } // ProductPassword (length: 100)
        public System.DateTime ProductDateAdded { get; set; } // ProductDateAdded
        public System.DateTime? ProductExpiry { get; set; } // ProductExpiry

        // Reverse navigation

        /// <summary>
        /// Parent (One-to-One) Product pointed by [Products].[ProductID] (FK_Products_Products)
        /// </summary>
        public virtual Product Product2 { get; set; } // Products.FK_Products_Products
        /// <summary>
        /// Child UpdateHistories where [UpdateHistory].[ProductID] point to this entity (FK_UpdateHistory_Products)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<UpdateHistory> UpdateHistories { get; set; } // UpdateHistory.FK_UpdateHistory_Products

        // Foreign keys

        /// <summary>
        /// Parent CrashCompany pointed by [Products].([Ccid]) (FK_tblProducts_tblCrashCompany)
        /// </summary>
        public virtual CrashCompany CrashCompany { get; set; } // FK_tblProducts_tblCrashCompany

        /// <summary>
        /// Parent Product pointed by [Products].([ProductId]) (FK_Products_Products)
        /// </summary>
        public virtual Product Product1 { get; set; } // FK_Products_Products

        /// <summary>
        /// Parent ProductCategory pointed by [Products].([Pcid]) (FK_tblProducts_tblProductCategory)
        /// </summary>
        public virtual ProductCategory ProductCategory { get; set; } // FK_tblProducts_tblProductCategory

        /// <summary>
        /// Parent Supplier pointed by [Products].([SupplierId]) (FK_tblProducts_tblSuppliers)
        /// </summary>
        public virtual Supplier Supplier { get; set; } // FK_tblProducts_tblSuppliers

        /// <summary>
        /// Parent User pointed by [Products].([StaffId]) (FK_tblProducts_tblStaff)
        /// </summary>
        public virtual User User { get; set; } // FK_tblProducts_tblStaff

        public Product()
        {
            ProductDateAdded = System.DateTime.Now;
            UpdateHistories = new System.Collections.Generic.List<UpdateHistory>();
        }
    }

    // ProductCategory
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ProductCategory
    {
        public int Pcid { get; set; } // PCID (Primary key)
        public string PcName { get; set; } // PCName (length: 100)

        // Reverse navigation

        /// <summary>
        /// Child Products where [Products].[PCID] point to this entity (FK_tblProducts_tblProductCategory)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Product> Products { get; set; } // Products.FK_tblProducts_tblProductCategory

        public ProductCategory()
        {
            Products = new System.Collections.Generic.List<Product>();
        }
    }

    // Suppliers
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class Supplier
    {
        public int SupplierId { get; set; } // SupplierID (Primary key)
        public string SupplierName { get; set; } // SupplierName (length: 100)
        public string SupplierAddress { get; set; } // SupplierAddress (length: 200)
        public string SupplierContactNumber { get; set; } // SupplierContactNumber (length: 30)
        public string SupplierEmail { get; set; } // SupplierEmail (length: 100)
        public string SupplierWebsite { get; set; } // SupplierWebsite (length: 100)
        public System.DateTime SupplierDateAdded { get; set; } // SupplierDateAdded

        // Reverse navigation

        /// <summary>
        /// Child Products where [Products].[SupplierID] point to this entity (FK_tblProducts_tblSuppliers)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Product> Products { get; set; } // Products.FK_tblProducts_tblSuppliers

        public Supplier()
        {
            SupplierDateAdded = System.DateTime.Now;
            Products = new System.Collections.Generic.List<Product>();
        }
    }

    // tblUser
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class TblUser
    {
        public int UserId { get; set; } // UserID (Primary key)
        public string UserFirstName { get; set; } // UserFirstName (length: 50)
        public string UserLastName { get; set; } // UserLastName (length: 50)
        public string UserInitials { get; set; } // UserInitials (length: 10)
        public string UserEmail { get; set; } // UserEmail (length: 50)
        public string UserHash { get; set; } // UserHash (length: 100)
        public string UserSalt { get; set; } // UserSalt (length: 20)
        public System.DateTime? UserDateCreated { get; set; } // UserDateCreated
        public bool? UserActive { get; set; } // UserActive
    }

    // UpdateHistory
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class UpdateHistory
    {
        public int Uhid { get; set; } // UHID (Primary key)
        public int ProductId { get; set; } // ProductID
        public int StaffId { get; set; } // StaffID
        public System.DateTime DateUpdated { get; set; } // DateUpdated

        // Foreign keys

        /// <summary>
        /// Parent Product pointed by [UpdateHistory].([ProductId]) (FK_UpdateHistory_Products)
        /// </summary>
        public virtual Product Product { get; set; } // FK_UpdateHistory_Products
    }

    // Users
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class User
    {
        public int UserId { get; set; } // UserID (Primary key)
        public string UserFirstName { get; set; } // UserFirstName (length: 50)
        public string UserLastName { get; set; } // UserLastName (length: 50)
        public string UserInitials { get; set; } // UserInitials (length: 10)
        public string UserEmail { get; set; } // UserEmail (length: 100)
        public string UserHash { get; set; } // UserHash (length: 100)
        public string UserSalt { get; set; } // UserSalt (length: 20)
        public System.DateTime? UserDateCreated { get; set; } // UserDateCreated
        public bool? UserActive { get; set; } // UserActive

        // Reverse navigation

        /// <summary>
        /// Child Products where [Products].[StaffID] point to this entity (FK_tblProducts_tblStaff)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Product> Products { get; set; } // Products.FK_tblProducts_tblStaff

        public User()
        {
            UserDateCreated = System.DateTime.Now;
            UserActive = true;
            Products = new System.Collections.Generic.List<Product>();
        }
    }

    #endregion

    #region POCO Configuration

    // CrashCompany
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class CrashCompanyConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<CrashCompany>
    {
        public CrashCompanyConfiguration()
            : this("dbo")
        {
        }

        public CrashCompanyConfiguration(string schema)
        {
            ToTable("CrashCompany", schema);
            HasKey(x => x.Ccid);

            Property(x => x.Ccid).HasColumnName(@"CCID").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.CcName).HasColumnName(@"CCName").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
        }
    }

    // Products
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ProductConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Product>
    {
        public ProductConfiguration()
            : this("dbo")
        {
        }

        public ProductConfiguration(string schema)
        {
            ToTable("Products", schema);
            HasKey(x => x.ProductId);

            Property(x => x.ProductId).HasColumnName(@"ProductID").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Pcid).HasColumnName(@"PCID").HasColumnType("int").IsRequired();
            Property(x => x.Ccid).HasColumnName(@"CCID").HasColumnType("int").IsRequired();
            Property(x => x.SupplierId).HasColumnName(@"SupplierID").HasColumnType("int").IsRequired();
            Property(x => x.StaffId).HasColumnName(@"StaffID").HasColumnType("int").IsRequired();
            Property(x => x.ProductDescription).HasColumnName(@"ProductDescription").HasColumnType("nvarchar").IsRequired().HasMaxLength(100);
            Property(x => x.ProductUrl).HasColumnName(@"ProductURL").HasColumnType("nvarchar").IsRequired().HasMaxLength(200);
            Property(x => x.ProductUsername).HasColumnName(@"ProductUsername").HasColumnType("nvarchar").IsRequired().HasMaxLength(40);
            Property(x => x.ProductPassword).HasColumnName(@"ProductPassword").HasColumnType("nvarchar").IsRequired().HasMaxLength(100);
            Property(x => x.ProductDateAdded).HasColumnName(@"ProductDateAdded").HasColumnType("datetime").IsRequired();
            Property(x => x.ProductExpiry).HasColumnName(@"ProductExpiry").HasColumnType("datetime").IsOptional();

            // Foreign keys
            HasRequired(a => a.CrashCompany).WithMany(b => b.Products).HasForeignKey(c => c.Ccid).WillCascadeOnDelete(false); // FK_tblProducts_tblCrashCompany
            HasRequired(a => a.Product1).WithOptional(b => b.Product2).WillCascadeOnDelete(false); // FK_Products_Products
            HasRequired(a => a.ProductCategory).WithMany(b => b.Products).HasForeignKey(c => c.Pcid).WillCascadeOnDelete(false); // FK_tblProducts_tblProductCategory
            HasRequired(a => a.Supplier).WithMany(b => b.Products).HasForeignKey(c => c.SupplierId).WillCascadeOnDelete(false); // FK_tblProducts_tblSuppliers
            HasRequired(a => a.User).WithMany(b => b.Products).HasForeignKey(c => c.StaffId).WillCascadeOnDelete(false); // FK_tblProducts_tblStaff
        }
    }

    // ProductCategory
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ProductCategoryConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<ProductCategory>
    {
        public ProductCategoryConfiguration()
            : this("dbo")
        {
        }

        public ProductCategoryConfiguration(string schema)
        {
            ToTable("ProductCategory", schema);
            HasKey(x => x.Pcid);

            Property(x => x.Pcid).HasColumnName(@"PCID").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.PcName).HasColumnName(@"PCName").HasColumnType("nvarchar").IsOptional().HasMaxLength(100);
        }
    }

    // Suppliers
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class SupplierConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Supplier>
    {
        public SupplierConfiguration()
            : this("dbo")
        {
        }

        public SupplierConfiguration(string schema)
        {
            ToTable("Suppliers", schema);
            HasKey(x => x.SupplierId);

            Property(x => x.SupplierId).HasColumnName(@"SupplierID").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.SupplierName).HasColumnName(@"SupplierName").HasColumnType("nvarchar").IsRequired().HasMaxLength(100);
            Property(x => x.SupplierAddress).HasColumnName(@"SupplierAddress").HasColumnType("nvarchar").IsOptional().HasMaxLength(200);
            Property(x => x.SupplierContactNumber).HasColumnName(@"SupplierContactNumber").HasColumnType("nvarchar").IsOptional().HasMaxLength(30);
            Property(x => x.SupplierEmail).HasColumnName(@"SupplierEmail").HasColumnType("nvarchar").IsOptional().HasMaxLength(100);
            Property(x => x.SupplierWebsite).HasColumnName(@"SupplierWebsite").HasColumnType("nvarchar").IsOptional().HasMaxLength(100);
            Property(x => x.SupplierDateAdded).HasColumnName(@"SupplierDateAdded").HasColumnType("datetime").IsRequired();
        }
    }

    // tblUser
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class TblUserConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<TblUser>
    {
        public TblUserConfiguration()
            : this("dbo")
        {
        }

        public TblUserConfiguration(string schema)
        {
            ToTable("tblUser", schema);
            HasKey(x => x.UserId);

            Property(x => x.UserId).HasColumnName(@"UserID").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.UserFirstName).HasColumnName(@"UserFirstName").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.UserLastName).HasColumnName(@"UserLastName").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.UserInitials).HasColumnName(@"UserInitials").HasColumnType("nvarchar").IsOptional().HasMaxLength(10);
            Property(x => x.UserEmail).HasColumnName(@"UserEmail").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.UserHash).HasColumnName(@"UserHash").HasColumnType("nvarchar").IsOptional().HasMaxLength(100);
            Property(x => x.UserSalt).HasColumnName(@"UserSalt").HasColumnType("nvarchar").IsOptional().HasMaxLength(20);
            Property(x => x.UserDateCreated).HasColumnName(@"UserDateCreated").HasColumnType("datetime").IsOptional();
            Property(x => x.UserActive).HasColumnName(@"UserActive").HasColumnType("bit").IsOptional();
        }
    }

    // UpdateHistory
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class UpdateHistoryConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<UpdateHistory>
    {
        public UpdateHistoryConfiguration()
            : this("dbo")
        {
        }

        public UpdateHistoryConfiguration(string schema)
        {
            ToTable("UpdateHistory", schema);
            HasKey(x => x.Uhid);

            Property(x => x.Uhid).HasColumnName(@"UHID").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.ProductId).HasColumnName(@"ProductID").HasColumnType("int").IsRequired();
            Property(x => x.StaffId).HasColumnName(@"StaffID").HasColumnType("int").IsRequired();
            Property(x => x.DateUpdated).HasColumnName(@"DateUpdated").HasColumnType("datetime").IsRequired();

            // Foreign keys
            HasRequired(a => a.Product).WithMany(b => b.UpdateHistories).HasForeignKey(c => c.ProductId).WillCascadeOnDelete(false); // FK_UpdateHistory_Products
        }
    }

    // Users
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class UserConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<User>
    {
        public UserConfiguration()
            : this("dbo")
        {
        }

        public UserConfiguration(string schema)
        {
            ToTable("Users", schema);
            HasKey(x => x.UserId);

            Property(x => x.UserId).HasColumnName(@"UserID").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.UserFirstName).HasColumnName(@"UserFirstName").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.UserLastName).HasColumnName(@"UserLastName").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.UserInitials).HasColumnName(@"UserInitials").HasColumnType("nchar").IsOptional().IsFixedLength().HasMaxLength(10);
            Property(x => x.UserEmail).HasColumnName(@"UserEmail").HasColumnType("nvarchar").IsOptional().HasMaxLength(100);
            Property(x => x.UserHash).HasColumnName(@"UserHash").HasColumnType("nvarchar").IsOptional().HasMaxLength(100);
            Property(x => x.UserSalt).HasColumnName(@"UserSalt").HasColumnType("nvarchar").IsOptional().HasMaxLength(20);
            Property(x => x.UserDateCreated).HasColumnName(@"UserDateCreated").HasColumnType("datetime").IsOptional();
            Property(x => x.UserActive).HasColumnName(@"UserActive").HasColumnType("bit").IsOptional();
        }
    }

    #endregion

}
// </auto-generated>

